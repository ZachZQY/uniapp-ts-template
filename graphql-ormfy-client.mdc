---
description: 
globs: 
alwaysApply: false
---
# @graphql-ormify-client.mdc 使用规则

## 1. 定位与作用

- `graphql-ormify-client` 是一个跨端（Web/小程序/Node）GraphQL 客户端库，支持类型安全、请求监控、自动适配多端环境。
- 主要用于统一管理前端 GraphQL 请求，简化 API 调用，提升开发效率和代码规范性。

---

## 2. 配置方式

- 配置文件统一放在项目根目录 `goc.config.ts`，内容示例：

  ```ts
  export default {
    endpoint: "https://your-graphql-endpoint",
    headers: {
      "x-hasura-admin-secret": "your_secret",
    },
  };
  ```

- endpoint 为 GraphQL 服务地址，headers 支持动态 token、admin secret 等。

---

## 3. 基本用法

### 3.1 导入客户端

```ts
import { hasuraClient } from '@/utils/graphql-ormify-client';
```

### 3.2 发送查询请求

```ts
const data = await hasuraClient.datas({
  table: 'resources',
  args: { id: 1 },
  datas_fields: ['id', 'name', 'description'],
});
```

- `table`：表名
- `args`：查询参数（where 条件等）
- `datas_fields`：需要返回的字段名数组

### 3.3 类型安全用法

```ts
import type { Resources } from '@/types/graphql';

const list = await hasuraClient.datas<Resources>({
  table: 'resources',
  args: { category: { _eq: 'banner' } },
  datas_fields: ['id', 'name'],
});
```

---

## 4. 推荐配合缓存工具使用

```ts
import cacheStore from '@/utils/cache-store';

export const get_resource_list = cacheStore.cache(
  async (args) => {
    return await hasuraClient.datas({ table: 'resources', args });
  },
  { duration: 1000 * 60 * 5 }
);
```

---

## 5. 典型场景案例

- **获取单条数据**  
  ```ts
  const item = await hasuraClient.datas({
    table: 'resources',
    args: { id: 123 },
    datas_fields: ['id', 'name'],
  });
  ```

- **分页/聚合/批量操作**  
  参考 `graphql-ormify-client` 文档或项目内封装方法。

---

## 6. 常见问题与注意事项

- 配置文件只用于本地开发和工具脚本，敏感信息不要在前端业务代码中暴露。
- 推荐所有 API 方法都用缓存工具包裹，提升性能和体验。
- 类型定义建议基于自动生成的 `src/types/graphql.ts`，保证类型安全。
- 支持请求监控、动态 header、超时、错误处理等高级特性，详见源码或团队二次封装文档。

---

## 7. 参考/扩展

- 如需自定义请求监控、header 动态注入、生命周期钩子等，可参考 `@/utils/graphql-ormify-client.ts` 内部实现或团队扩展文档。

---

如需补充更详细的用法或团队约定，欢迎继续补充！
